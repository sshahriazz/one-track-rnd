//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "task")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub section_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::section::Entity",
        from = "Column::SectionId",
        to = "super::section::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Section,
    #[sea_orm(has_many = "super::sub_task::Entity")]
    SubTask,
}

impl Related<super::section::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Section.def()
    }
}

impl Related<super::sub_task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubTask.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
